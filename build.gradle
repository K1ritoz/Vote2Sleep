plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.0'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'com.github.k1ritoz'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "placeholderapi"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        name = "enginehub-maven"
        url = "https://maven.enginehub.org/repo/"
    }
    maven {
        name = "essentials-releases"
        url = "https://repo.essentialsx.net/releases/"
    }
    maven {
        name = "spigot-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")

    // Optional dependencies
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.9")
    compileOnly("net.essentialsx:EssentialsX:2.21.1") {
        exclude group: "org.spigotmc", module: "spigot-api"
    }

    // Database dependencies (shaded)
    implementation("org.xerial:sqlite-jdbc:3.44.1.0")
    implementation("com.mysql:mysql-connector-j:8.2.0")

    // Utility libraries (shaded)
    implementation("org.apache.commons:commons-lang3:3.14.0")

    // Testing
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.1")
    testImplementation("org.mockito:mockito-core:5.18.0")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        minecraftVersion("1.21.4")

        // Download plugins for testing
        downloadPlugins {
            modrinth("placeholderapi", "2.11.6")
            github("EssentialsX", "Essentials", "2.21.1", "EssentialsX-2.21.1.jar")
        }
    }

    shadowJar {
        archiveClassifier.set('')

        // Relocate shaded dependencies to avoid conflicts
        relocate 'org.sqlite', 'com.github.k1ritoz.vote2sleep.lib.sqlite'
        relocate 'com.mysql', 'com.github.k1ritoz.vote2sleep.lib.mysql'
        relocate 'org.apache.commons.lang3', 'com.github.k1ritoz.vote2sleep.lib.commons'

        // Minimize jar size by excluding unused classes
        minimize()

        // Include only necessary dependencies
        dependencies {
            include(dependency("org.xerial:sqlite-jdbc"))
            include(dependency("com.mysql:mysql-connector-j"))
            include(dependency("org.apache.commons:commons-lang3"))
        }
    }

    build {
        dependsOn shadowJar
    }

    test {
        useJUnitPlatform()
    }

    processResources {
        def props = [version: version]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching('plugin.yml') {
            expand props
        }
        filesMatching('config.yml') {
            expand props
        }
        filesMatching('messages_en.yml') {
            expand props
        }
        filesMatching('messages_pt_br.yml') {
            expand props
        }
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}